#!/bin/sh
set -e
set -x

#unnecessary comment

preflight_checks() {
	if [ "$(id -u ubuntu)" != "1000" ]; then
		echo "ERROR: Read the docs; a proper OrangeBox setup requires the default user to be [ubuntu]" 1>&2
		exit 1
	fi
	case $(hostname) in
		OrangeBox*)
			true
		;;
		*)
			echo "ERROR: Read the docs; a OrangeBox setup requires the hostname to be in the form [OrangeBox*]" 1>&2
			exit 1
		;;
	esac
	# TODO: Check that the AMTs are on static IPs
	# TODO: Check dual hard drives, which one is which
	# TODO: Ensure we have two interfaces, one internal, one external
}

setup_debconf() {
	echo "debconf maas/default-maas-url string 10.14.4.1" | debconf-set-selections -
	echo "debconf maas-cluster-controller/maas-url string http://10.14.4.1/MAAS" | debconf-set-selections -
	echo "debconf maas/installation-note boolean true" | debconf-set-selections -
	echo "debconf iptables-persistent/autosave_done boolean true" | debconf-set-selections -
	echo "debconf iptables-persistent/autosave_v4 boolean true" | debconf-set-selections -
	echo "debconf iptables-persistent/autosave_v6 boolean true" | debconf-set-selections -
}

setup_networking() {
	modprobe 8021q || true
	sed -i -e "/8021q/d" /etc/modules || true
	echo "8021q" >> /etc/modules
	# Set up the two network interfaces
	external_interface=$(ip route ls | grep ^default | awk '{print $5}')
	# TODO: ip addr ls
	for interface in $(ifconfig -a -s | grep -v ^Iface | awk '{print $1}'); do
		case "$interface" in
			lo|br*|wlan*)
				continue
			;;
			$external_interface)
				continue
			;;
			*)
				internal_interface="$interface"
				break
			;;
		esac
	done
	# Set a sane default
	[ -z "$internal_interface" ] && internal_interface=eth0
	# TODO: use ip
	default_mac=$(ifconfig "$internal_interface" | grep "^$internal_interface" | sed -e "s/.*HWaddr //")
	# Tell NetworkManager to piss off
	sed -i -e "/^unmanaged-devices=mac:$default_mac$/d" /etc/NetworkManager/NetworkManager.conf
	cat >>/etc/NetworkManager/NetworkManager.conf <<EOF
[keyfile]
unmanaged-devices=mac:$default_mac
EOF
	invoke-rc.d network-manager restart
        cat >/etc/network/interfaces <<EOF
auto lo
iface lo inet loopback

auto $internal_interface
iface $internal_interface inet manual

auto br0
iface br0 inet static
        address 10.14.4.1
        netmask 255.255.0.0
        broadcast 10.14.255.255
	bridge_ports $internal_interface
	bridge_stp off
	bridge_fd 0
	bridge_maxwait 0

# VLAN 1, Network configuration network
#auto eth0.1
#iface eth0.1 inet static
#vlan-raw-device eth0
#address 10.90.90.1
#netmask 255.0.0.0
#gateway 0.0.0.0
#broadcast 10.255.255.255

EOF
	ifdown --force $internal_interface || true
	ifdown --force br0 || true
	ifup $internal_interface
	ifup br0
        # Wait a moment for the network to normalize
	echo "INFO: Conservatively sleeping 30 seconds to ensure networking has settled"
	sleep 30
}

setup_external_drive() {
	# External drive must be:
	#       a) partitioned into 1 big partition
	#       b) ext4 formatted
	# Find root disk
	root_disk=$(mount | grep " on / " | awk '{print $1}' | sed -e "s/[0-9]\+$//")
	# Find biggest non-root disk
	ext_disk=$(fdisk -l | grep "^Disk /" | grep -v $root_disk | sort -k4 -n -r | awk '{print $2}' | awk -F: '{print $1}')
	partition="${ext_disk}1"
	if [ -b "$ext_disk" ]; then
		if [ ! -b "$partition" ]; then
			# Create the partition, if it doesn't exist already
			echo "n
p
1


w
"|fdisk "$ext_disk"
			mkfs.ext4 "$partition"
		fi
		sed -i -e "/ \/srv/d" /etc/fstab
		# Add the fstab entry
		uuid=$(blkid -s UUID -o value "$partition")
		echo "UUID=$uuid /srv    ext4    defaults        1 1" >> /etc/fstab
	fi
	umount $partition || true
	mount -a
	chown root:root /srv
	chmod 755 /srv
}


preflight_checks
setup_external_drive
setup_debconf
setup_networking

#DEBHELPER#

exit 0
