#!/bin/bash
#
#    orange-box-status-all-nodes - query amt status of each node
#    Copyright (C) 2014 Canonical Ltd.
#
#    Authors: Ronald McCollam <ronald.mccollam@canonical.com>
#             Darryl Weaver <darryl.weaver@canonical.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


export AMT_PASSWORD=Password1+
ERRORS=0

okay() {
        echo "OK:    $@"
}

error() {
        echo "ERROR: $@"
        ERRORS=$((ERRORS+1))
}


status_all_nodes() {
        # Check all VM nodes
        for i in $(seq 0 2); do
                if virsh list --all | grep node0vm${i} | grep running >/dev/null 2>&1; then
                        okay "[node0vm${i}]: Is running"
                        uptime=$(ssh node0vm${i}.maas "uptime" 2>/dev/null)
                        if [ -n "$uptime" ]; then
                                okay "[node0vm${i}]:  SSH to node successful; uptime=[$uptime]"
                        else
                                error "[node0vm${i}]:  SSH to node unsuccessful; uptime=[$uptime]"
                        fi
                else
                        error "[node0vm${i}]: Is not running"
                fi
        done
        # Check all AMT nodes
        for i in $(seq 1 9); do
                hostname="node${i}.maas"
                # (1) Ping AMT IP Addresses
                amt_ip="10.14.4.1$i"
                if ping -c 1 -q $amt_ip >/dev/null 2>&1; then
                        okay "[$hostname]: AMT responding to ping [$amt_ip]"
                else
                        error "[$hostname]: AMT not responding to ping [$amt_ip]"
                        continue
                fi
                # (2) If AMT pingable, check for AMT open port 16992
                if netcat -z -v $amt_ip 16992 >/dev/null 2>&1; then
                        okay "[$hostname]:  AMT listening on port [16992] [$amt_ip]"
                else
                        error "[$hostname]:  AMT not listening on port [16992] [$amt_ip]"
                        continue
                fi
                amtoutput=$(yes | amttool $amt_ip info)
                amtpowerstate=$(echo "$amtoutput" | grep "^Powerstate:" | awk '{print $2}')
                # (3) If AMT port open, check AMT for power state
                if [ "$amtpowerstate" = "S0" ]; then
                        okay "[$hostname]:   AMT powerstate [$amtpowerstate](running) on [$amt_ip]"
                elif [ "$amtpowerstate" = "S5" ]; then
                        okay "[$hostname]:   AMT powerstate [$amtpowerstate](not running) on [$amt_ip]"
                        continue
                else
                        error "[$hostname]:   AMT powerstate unknown [$amtpowerstate] on [$amt_ip]"
                        continue
                fi
                # (4) If power state is running, test pingable OS
                ip=$(host $hostname | tail -n1  | sed -e "s/.* //")
                if ping -c 1 -q $hostname >/dev/null 2>&1; then
                        okay "[$hostname]:    OS responding to ping, ip=[$ip]"
                else
                        error "[$hostname]:   OS not responding to ping, ip=[$ip]"
                        continue
                fi
                uptime=$(ssh $hostname "uptime" 2>/dev/null)
                # (5) If OS is pingable, test SSH to OS
                if [ -n "$uptime" ]; then
                        okay "[$hostname]:     SSH to node successful; uptime=[$uptime]"
                else
                        error "[$hostname]:    SSH to node unsuccessful; uptime=[$uptime]"
                        continue
                fi
                memory=$(ssh $hostname "grep -m1 '^MemTotal:' /proc/meminfo | sed -e 's/.*:\s\+//'" 2>/dev/null)
                # (6) If SSH works, test memory
                if [ -n "$memory" ]; then
                        okay "[$hostname]:     Memory check of node successful; memory=[$memory]"
                else
                        error "[$hostname]:    Memory check of node unsuccessful; memory=[$memory]"
                        continue
                fi
                # (7) If SSH works, test disk
                disk=$(ssh $hostname "sudo fdisk -l | grep '^Disk /' | sed -e 's/^Disk //' -e 's/,.*//'" 2>/dev/null)
                if [ -n "$disk" ]; then
                        okay "[$hostname]:     Disk check of node successful; disk=[$(echo $disk | tr '\n' ' ')]"
                else
                        error "[$hostname]:    Disk check of node unsuccessful; disk=[$disk]"
                        continue
                fi
        done
}

status_all_nodes | ccze -A

if [ $ERRORS -eq 0 ]; then
        exit 0
else
        exit $ERRORS
fi

