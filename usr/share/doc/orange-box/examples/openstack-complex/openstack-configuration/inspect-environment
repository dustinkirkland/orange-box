#!/bin/bash
# Generate an envrc to be sourced and used by all tests (and possibly humans).
#
#   - Using juju-deployer, determine where all services ended up.
#   - With the admin credentials configured in juju's deployment configs,
#     generate EC2 credentials.
#   - Dump everything into envrc using names compatable with client tools
#
# Additionally dump anything else needed for test suite configurations. See
# etc/tests/all_variables for a list of what should be set in envrc.
#
# Also collect all package version from the nodes, save in a text file.
# Both envrc and versions_tested are to be used as file parameters to
# Jenkins test jobs.

echo "Inspecting deployed environment."
# Discover where the services ended up
NOVA_HOST=$(juju-deployer -f nova-cloud-controller 2>/dev/null)
GLANCE_HOST=$(juju-deployer -f glance 2>/dev/null)
KEYSTONE_HOST=$(juju-deployer -f keystone 2>/dev/null)
NOVA_VOLUME_HOST=$(juju-deployer -f nova-volume 2>/dev/null)
CINDER_HOST=$(juju-deployer -f cinder 2>/dev/null)
NOVA_COMPUTE_HOST=$(juju-deployer -f nova-compute 2>/dev/null)
NEUTRON_HOST=$(juju-deployer -f neutron-gateway 2>/dev/null)
QUANTUM_HOST=$(juju-deployer -f quantum-gateway 2>/dev/null)
HORIZON_HOST=$(juju-deployer -f openstack-dashboard 2>/dev/null)
CEPH_HOST=$(juju-deployer -f ceph 2>/dev/null)
SWIFT_HOST=$(juju-deployer -f swift-proxy 2>/dev/null)
NOVA_VMWARE_HOST=$(juju-deployer -f nova-vmware 2>/dev/null)

# Handle the quantum -> neutron rename.
[[ -n "$NEUTRON_HOST" ]] && QUANTUM_HOST="$NEUTRON_HOST"

# Ensure essential hosts are present, and build ENABLED_SERVICES so devstack
# knows what it should be testing.
ENABLED_SERVICES=""
MISSING_HOSTS=""

[[ ! -z "$NOVA_HOST" ]] &&
  ENABLED_SERVICES="n-api,n-crt,n-obj,n-sch" ||
  MISSING_HOSTS="$MISSING_HOSTS NOVA_HOST"
[[ ! -z "$GLANCE_HOST" ]] &&
  ENABLED_SERVICES="${ENABLED_SERVICES},g-api,g-reg" ||
  MISSING_HOSTS="$MISSING_HOSTS GLANCE_HOST"
[[ ! -z "$KEYSTONE_HOST" ]] &&
  ENABLED_SERVICES="${ENABLED_SERVICES},key" ||
  MISSING_HOSTS="$MISSING_HOSTS KEYSTONE_HOST"

# Optional services.
[[ ! -z "$NOVA_VOLUME_HOST" ]] && ENABLED_SERVICES="$ENABLED_SERVICES,n-vol"
[[ ! -z "$CEPH_HOST" ]] && ENABLED_SERVICES="$ENABLED_SERVICES,ceph"
[[ ! -z "$CINDER_HOST" ]] && ENABLED_SERVICES="$ENABLED_SERVICES,cinder,c-api,c-vol"
[[ ! -z "$HORIZON_HOST" ]] && ENABLED_SERVICES="$ENABLED_SERVICES,horizon"
[[ ! -z "$QUANTUM_HOST" ]] && ENABLED_SERVICES="$ENABLED_SERVICES,quantum" ||
  ENABLED_SERVICES="$ENABLED_SERVICES,n-net"
[[ ! -z "$SWIFT_HOST" ]] && ENABLED_SERVICES="$ENABLED_SERVICES,swift"

# Bail if we're missing any critical services.
[[ -n "$MISSING_HOSTS" ]] &&
  echo "Missing required host in deployment: $MISSING_HOSTS" && exit 1

# These are hard-coded in charm deployment configs, for now.
# They could potentially be extracted from Juju on the go, via
# juju-get
export OS_USERNAME='admin'
export OS_PASSWORD='Password1+'
export OS_TENANT_NAME='admin'
export OS_AUTH_URL="http://$KEYSTONE_HOST:5000/v2.0/"
export ADMIN_TOKEN='ubuntutesting'

# Determine the tenant id for the configured tenant name.
export TENANT_ID="$(keystone tenant-list | grep $OS_TENANT_NAME | awk '{ print $2 }')"

# Floating IP settings specific to our lab.  These are used in
# Quantum network config from prepare_cloud.sh
export QUANTUM_EXT_NET_GW=${QUANTUM_EXT_NET_GW:-172.16.1.1}
export QUANTUM_EXT_NET_CIDR=${QUANTUM_EXT_NET_CIDR:-172.16.1.0/24}
export QUANTUM_EXT_NET_NAME=${QUANTUM_EXT_NET_NAME:-ext_net}
export QUANTUM_FLOAT_RANGE=${QUANTUM_FLOAT_RANGE:-172.16.1.2:172.16.1.254}
export QUANTUM_FIXED_NET_CIDR=${QUANTUM_FIXED_NET_CIDR:-192.168.20.0/24}
export QUANTUM_FIXED_NET_NAME=${QUANTUM_FIXED_NET_NAME:-admin_net}
export QUANTUM_DNS=${QUANTUM_DNS:-172.16.1.1}

# nova-network dhcp settings, used in prepare_cloud.sh
export NOVA_NET_PRIVATE_NET_CIDR=${NOVA_NET_PRIVATE_NET_CIDR:-192.168.21.0/24}
export NOVA_NET_FLOATING_POOL_RANGE=${NOVA_NET_FLOATING_POOL_RANGE:-192.168.20.224/27}
export NOVA_NET_FLOATING_POOL_RANGE_2=${NOVA_NET_FLOATING_POOL_RANGE_2:-192.168.20.223/27}

# Generate some EC2 creds via keystoneclient, if
# its installed
if which keystone >/dev/null 2>&1 ; then
  EC2_URL=$(keystone catalog --service ec2 | awk '/ publicURL / { print $4 }')
  S3_URL=$(keystone catalog --service s3 | awk '/ publicURL / { print $4 }')
  CREDS=$(keystone ec2-credentials-create)
  EC2_ACCESS_KEY=$(echo "$CREDS" | awk '/ access / { print $4 }')
  EC2_SECRET_KEY=$(echo "$CREDS" | awk '/ secret / { print $4 }')
else
  echo "Couldn't find keystone client executable, skipping"\
       " EC2 credential generation."
fi

echo "Writing envrc"

cat >envrc <<END
export NOVA_HOST=$NOVA_HOST
export GLANCE_HOST=$GLANCE_HOST
export KEYSTONE_HOST=$KEYSTONE_HOST
export HORIZON_HOST=$HORIZON_HOST
export CINDER_HOST=$CINDER_HOST
export NOVA_VOLUME_HOST=$NOVA_VOLUME_HOST
export NOVA_COMPUTE_HOST=$NOVA_COMPUTE_HOST
export SWIFT_HOST=$SWIFT_HOST
export OS_USERNAME=$OS_USERNAME
export OS_PASSWORD=$OS_PASSWORD
export OS_TENANT_NAME=$OS_TENANT_NAME
export TENANT_ID=$TENANT_ID
export OS_AUTH_URL=$OS_AUTH_URL
export OS_REGION_NAME=RegionOne
export ADMIN_TOKEN=$ADMIN_TOKEN
export TEMPEST_USER_1=tempest-1
export TEMPEST_USER_2=tempest-2
export TEMPEST_USERS_PASSWORD=ubuntu
export TEMPEST_TENANT_1=tempest-tenant-1
export TEMPEST_TENANT_2=tempest-tenant-2
export ENABLED_SERVICES=$ENABLED_SERVICES
END

if [[ -n "$EC2_URL" ]] ; then
  cat >>envrc <<END
export EC2_URL=$EC2_URL
export S3_URL=$S3_URL
export EC2_ACCESS_KEY=$EC2_ACCESS_KEY
export EC2_SECRET_KEY=$EC2_SECRET_KEY
END
fi

if [[ -n "$QUANTUM_HOST" ]] ; then
  cat >>envrc <<END
export NEUTRON_AVAILABLE=true
export QUANTUM_AVAILABLE=true
export QUANTUM_HOST=$QUANTUM_HOST
export QUANTUM_EXT_NET_GW=$QUANTUM_EXT_NET_GW
export QUANTUM_EXT_NET_CIDR=$QUANTUM_EXT_NET_CIDR
export QUANTUM_EXT_NET_NAME=$QUANTUM_EXT_NET_NAME
export QUANTUM_FLOAT_RANGE=$QUANTUM_FLOAT_RANGE
export QUANTUM_FIXED_NET_CIDR=$QUANTUM_FIXED_NET_CIDR
export QUANTUM_FIXED_NET_NAME=$QUANTUM_FIXED_NET_NAME
export QUANTUM_DNS=$QUANTUM_DNS
END
else
  cat >>envrc <<END
export NEUTRON_AVAILABLE=false
export QUANTUM_AVAILABLE=false
export NOVA_NET_PRIVATE_NET_CIDR=$NOVA_NET_PRIVATE_NET_CIDR
export NOVA_NET_FLOATING_POOL_RANGE=$NOVA_NET_FLOATING_POOL_RANGE
export NOVA_NET_FLOATING_POOL_RANGE_2=$NOVA_NET_FLOATING_POOL_RANGE_2
END
fi

if [[ -n "$SWIFT_HOST" ]] ; then
  echo "export SWIFT_AVAILABLE=false" >>envrc
else
  echo "export SWIFT_AVAILABLE=false" >>envrc
fi

if [[ -n "$CEPH_HOST" ]] ; then
  echo "export VOLUME_BACKEND=ceph" >>envrc
else
  echo "export VOLUME_BACKEND=iSCSI" >>envrc
fi

# TODO: Extend this to support detecting other computes (lxc)
if [[ -n "$NOVA_COMPUTE_HOST" ]] ; then
  virt_type=$(python -c "
import yaml
import subprocess
conf = yaml.load(subprocess.check_output(['juju', 'get', 'nova-compute']))
if 'value' in conf['settings']['virt-type']:
    print conf['settings']['virt-type']['value']
else:
    print 'kvm'
")
  [[ -z "$virt_type" ]] && virt_type="kvm"
  echo "export COMPUTE_BACKEND=$virt_type" >>envrc
elif [[ -n "$NOVA_VMWARE_HOST" ]] ; then
  echo "export COMPUTE_BACKEND=vmware" >>envrc
fi
